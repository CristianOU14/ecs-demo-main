name: Deploy to AWS ECS

on:
  push:
    branches:
      - main  # Se ejecuta cada vez que haga push a 'main'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Clonar el código
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Configurar credenciales de AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # 3️⃣ Login a ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4️⃣ Construir y subir imagen
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: iue-rep
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 5️⃣ Renderizar nueva definición de tarea
      - name: create new task definition
        id: taskdef
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          container-name: myapp-container
          image: ${{ steps.login-ecr.outputs.registry }}/iue-rep:latest

      # 6️⃣ Desplegar en ECS
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.taskdef.outputs.task-definition }}
          service: ecs-demo-app-serviceIUE
          cluster: supportive-fish-qa9pi1
          wait-for-service-stability: true
